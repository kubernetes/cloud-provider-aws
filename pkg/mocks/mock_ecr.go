// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/ecr-credential-provider/main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ecr "github.com/aws/aws-sdk-go-v2/service/ecr"
	ecrpublic "github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	gomock "github.com/golang/mock/gomock"
)

// MockECR is a mock of ECR interface.
type MockECR struct {
	ctrl     *gomock.Controller
	recorder *MockECRMockRecorder
}

// MockECRMockRecorder is the mock recorder for MockECR.
type MockECRMockRecorder struct {
	mock *MockECR
}

// NewMockECR creates a new mock instance.
func NewMockECR(ctrl *gomock.Controller) *MockECR {
	mock := &MockECR{ctrl: ctrl}
	mock.recorder = &MockECRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECR) EXPECT() *MockECRMockRecorder {
	return m.recorder
}

// GetAuthorizationToken mocks base method.
func (m *MockECR) GetAuthorizationToken(ctx context.Context, input *ecr.GetAuthorizationTokenInput, optFns ...func(*ecr.Options)) (*ecr.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationToken", varargs...)
	ret0, _ := ret[0].(*ecr.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken.
func (mr *MockECRMockRecorder) GetAuthorizationToken(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECR)(nil).GetAuthorizationToken), varargs...)
}

// MockECRPublic is a mock of ECRPublic interface.
type MockECRPublic struct {
	ctrl     *gomock.Controller
	recorder *MockECRPublicMockRecorder
}

// MockECRPublicMockRecorder is the mock recorder for MockECRPublic.
type MockECRPublicMockRecorder struct {
	mock *MockECRPublic
}

// NewMockECRPublic creates a new mock instance.
func NewMockECRPublic(ctrl *gomock.Controller) *MockECRPublic {
	mock := &MockECRPublic{ctrl: ctrl}
	mock.recorder = &MockECRPublicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRPublic) EXPECT() *MockECRPublicMockRecorder {
	return m.recorder
}

// GetAuthorizationToken mocks base method.
func (m *MockECRPublic) GetAuthorizationToken(ctx context.Context, input *ecrpublic.GetAuthorizationTokenInput, optFns ...func(*ecrpublic.Options)) (*ecrpublic.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationToken", varargs...)
	ret0, _ := ret[0].(*ecrpublic.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken.
func (mr *MockECRPublicMockRecorder) GetAuthorizationToken(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECRPublic)(nil).GetAuthorizationToken), varargs...)
}
